
Notações Next.js

aula: https://www.youtube.com/watch?v=mtsuTzpbtes&list=PLnDvRpP8BnezfJcfiClWskFOLODeqI_Ft&index=2


Doc: https://nextjs.org/docs/getting-started


Criando um projeto next: npx create-next-app <nome>


Inicia-lo: npm run dev

DICA: Caso der erro, atualizar a versão do seu node.js


Criando uma página:

Vamos em pages, botão direito, new file e criamos um arquivo .js
Dentro dele criamos um componente e retornamos algo dentro dele, para ver se deu certo é só ir no localhosto e digitar /nomeComponente:

ex:

about.js


export default function About(){
    return <h1>Página About</h1>
}



na url: http://localhost:3000/about





# Nested Routes



-> São rotas compostas, onde precisamos criar uma estrutura mais complexa, como:
/products/shirt

-> A ideia é criar uma pasta chamada products em pages, e os arquivos das páginas dentro desta pasta, o roteamento funciona da mesma forma

-> Gerando páginas baseadas em pastas e arquivos
-> O arquivo index.js em uma pasta vira a rota base da Nested.


Prática:

em pages criamos uma pasta chamada products e dentro dela uma arquivo shit.js

export default function Shirt(){
    return <h1>Camisa Shirt</h1>
}



E fomos na url e botamos: http://localhost:3000/products/shirt

e assim vai redenrizar o conteúdo que estiver dentro do arquivo shirt


feito isso criamos um arquivo index.js, e esse será a rota /home ou seja a padrão assim que a url http://localhost:3000/products for acessada!



# Navegação entre páginas (componente link)


Vamos no arquivo index.js da pasta pages

importamos: import Link from 'next/link'

e dentro da function home fizemos um teste com o componente link, colocando um href nele para uma determinada rota, código abaixo:



import Link from 'next/link'


export default function Home() {
  return (
  <div className={styles.container}>

    <ul>
      <li>
        <Link href="/products">
          <a>Products</a>
        </Link>
      </li>
    </ul>

    <h1>Hello world next js</h1>
  </div>
  )
}


Na rota products adionamos um Link para retornar a home:


import Link from "next/link"

export default function Products(){
    return (
    
        <>
            <h1>Página de produtos</h1>
            <Link href="/">
                <a>Voltar</a>
            </Link>
        </>
    )
}




#Componentes do next

Criamos um pasta chamada components na raiz da pasta do projeto e dentro dela será onde iremos criar nossos componentes, com isso podemos apenas importa-los e chama-los em qualquer arquivo.


dentro de components criamos o Navbar.js:


import Link from "next/link"

export default function Navbar(){
    return (

        <ul>
        <li>
          <Link href="/products">  
            <a>Products</a>
          </Link>
        </li>
        <li>
        <Link href="/about">  
            <a>About</a>
          </Link>
        </li>
      </ul>
  
    )
}


e no index do projeto importamos e chamamos o Navbar


import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Navbar from '../components/Navbar'


export default function Home() {
  return (

  <div className={styles.container}>
    <Navbar />
    <h1>Hello world next js</h1>
  </div>
  )
}



# Componentes de layout


Quando criamos sites, alguns componentes sempre se repetem, em todas as páginas, exemplo: Navbar e footer

basicamente vamos criar os componentes e colocar na pasta components e chamá-los no arquivo _app.js


em components criamos o arquivo MainContainer.js:

import Navbar from "./Navbar";

export default function MainContainer({children}){


    return (

        <>
            <Navbar/>
            <div>{children}</div>
        </>

    )
}


A prop children serve para indicar que ele terá algum conteúdo para renderizar


e em _app.js encaplusamos a tag Component pelo MainContainer:


import '../styles/globals.css'
import MainContainer from '../components/MainContainer'

function MyApp({ Component, pageProps }) {
  return (
    
    <MainContainer>
        <Component {...pageProps} />
    </MainContainer>
    
  )
}

export default MyApp


feito isso, tudo que estiver no MainContainer irá refletir em todas as páginas


Criamos tbm um Footer.js dentro do components:


import Link from "next/link";


export default function Footer(){
    return (
        
        <p>Curso de Next.js &copy; 2022</p>

    )

    
}


e no MainContainer chamamos e importamos o footer:


import Footer from "./Footer";
import Navbar from "./Navbar";

export default function MainContainer({children}){


    return (

        <>
            <Navbar/>
            <div>{children}</div>
            <Footer/>
        </>

    )
}




#adicionando CSS no Next


na pasta styles podemos criar os arquivos de estilização do projeto
padrão de nome: Home.module.css ou About.module.css

após isso vamos no arquivo na qual queremos receber a estilização importamos e chamamos no className, exemplo:

index.js

import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'


export default function Home() {
  return (

  <div>
  
    <h1 className={styles.title} >Hello world next js</h1>
  </div>
  
  )
}




Home.module.css:



.title {
  color: red;
}




# Meta dados no next

usamos o componente Head, importamos e chamamos a tag <Head>


exemplo feito na home (index.js principal do projeto)


import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'



export default function Home() {
  return (
    <>
    
      <Head>
      
        <title>Página principal</title>
        <meta name='keywords' content='Roupas, Calçados, Boné ' ></meta>
        <meta name='description' content='Encontre a melhor roupa para você' ></meta>
      
      </Head>    

      <div>
      
        <h1 className={styles.title} >Hello world next js</h1>
      </div>
    
    </>

  )
}



# Assets


Os assets em ficam sempre na pasta public
para linkar o src de uma imagem, por exemplo podemos partir do caminho dela relativo a public.

em public criamos uma pasta images e dentro dela colocamos as imagens que precisamos


para poder chamar essas images em algum arquivo, é necessário importar:


import Image from 'next/image'


e chamamos a tag <Image>


exemplo abaixo:



import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'


export default function Home() {
  return (
    <>
    
      <Head>
      
        <title>Página principal</title>
        <meta name='keywords' content='Roupas, Calçados, Boné ' ></meta>
        <meta name='description' content='Encontre a melhor roupa para você' ></meta>
      
      </Head>    

      <div>
      
        <h1 className={styles.title} >Hello world next js</h1>
        <Image 
          src="/images/city.jpg" 
          width="400px" 
          height="500px" 
          alt='Cidade a noite' 
        />

      </div>
    
    </>

  )
}




# Fetch data com Next (requisição em API) 


Para pegar dados dinâmicos vamos precisar da função getStaticProps;
Utilizamos esta na própria página, que possui dados a serem exibidos;
Ela deve retornar um objeto com dados;
Recurso chamado de Pre-rendering


Para o teste criamos um arquivo todos.js dentro da pasta products e inserimos os seguintes códigos:


import styles from '../styles/Todos.module.css'


export async function getStaticProps(){
    const data = await fetch('https://jsonplaceholder.typicode.com/todos')

    const todos = await data.json()

    //console.log(todos)

    return{
        props: { todos },
    }
}

export default function Todos({ todos }){

    return (
        <>
            <h1>Tarefas para fazer:</h1>
            <ul className={styles.todolist}>
                {todos.map((todo) => (
                    <li key={todo.id} >{todo.title}</li>

                ))}
                
            </ul>
       
        </>
    )

}




# Rotas dinâmicas


Podemos criar rotas dinâmicas, ou seja, que são geradas pelo próprio Next;

Para isso vamos criar um arquivo no padrão: [id].js

Onde id seria o dado alterado em cada página

Desta maneira temos páginas que são criadas automaticamente.



em pages criamos outra pasta chamada todos, dentro dela colocamos o antigo arquivo todos.js renomeamos para index.js e criamos um outro arquivo chamda [todoId].js e colocamos o seguinte código.



Criamos uma pasta todos, depois [todoId], depois comments e dentro de comments criamos um arquivo [commentsId].js com o seguinte código:



import Link from "next/link";
import { useRouter } from "next/router";


export default function Comment(){

    const router = useRouter()

    const todoId = router.query.todoId
    const commentId = router.query.commentId

    return (
        <>
        
            <Link href={`/todos/${todoId}`}>
                <a>Voltar</a>
            </Link>
            <h1>Exibindo o comentário número: {commentId}</h1>
            <p>Do todo: {todoId}</p>
                                                                   
        </>
    )

}



DICA: As pastas precisam está assim para que o next possa entender a regra de negócio corretamente.



# Rotas dinâmicas com dados reais


Para exibir dados nestas rotas vamos precisar utilizar o método getStaticProps;
E também o getStaticPaths, este vai fazer a criação das páginas dinâmicas em HTML
Agora podemos acessar o objeto com os dados dentro do componente da página


Parei aqui: https://www.youtube.com/watch?v=Mzt_eg5IBiU&list=PLnDvRpP8BnezfJcfiClWskFOLODeqI_Ft&index=14




no arquivo [todoId].js criamos duas novas function:


export async function getStaticProps(context){

    const { params } = context

    const data = await fetch(`https://jsonplaceholder.typicode.com/todos/${params.todoId}`)

    const todo = await data.json()

    return{
        props: { todo },
    }

}


export async function getStaticPaths(){

    const response = await fetch('https://jsonplaceholder.typicode.com/todos/')

    const data = await response.json()
    
    const paths = data.map((todo) => {
        return{
          params: {
            todoId: `${todo.id}`,
          },
        }
    })

    return { paths, fallback: false }

    
}



e ajustamos  a function Todo mais abaixo no mesmo arquivo:


export default function Todo({ todo }){

  

    return(
        <>
        
            <Link href="/" >

                <a>Voltar</a>

            </Link>
            <h1>Exibindo o todo: {todo.id}</h1>
            <h3>Texto: {todo.title}</h3>
            <p>
                Comentário: la la la...
                <Link href={`/todos/${todo.id}/comments/1`}>
                    <a>Detalhes</a>
                </Link>
            </p>

        </>
    )
}




#Parei aqui: https://www.youtube.com/watch?v=rQSMtBXxdh4&list=PLnDvRpP8BnezfJcfiClWskFOLODeqI_Ft&index=15




# Pág 404 customizada

para criar basta ir em pages e criar um 404.js e personalizar



404.js exemplo


import Link from "next/link";

export default function NotFound(){

    return(
        <>
            <h1>404</h1>
            <p>Parece que esta página não existe!</p>
            <Link href="/">
                <a>Voltar para home</a>
            </Link>            
        </>
    )

}



# Analisando build


Para buildar o projeto para produção utilizamos: npm run build


excluimos a pasta .next lá no inicio do arquivos do projeto e damos o comando: 
npm run build, com isso o next irá buildar todo o projeto, se ocorrer algum erro
ele não deixa o build prosseguir.








































































































